---
import LightClock from "../../components/LightClock.astro";
import NumericInput from "../../components/NumericInput.astro";
import Svg from "../../components/Svg.astro";
---

<Svg />

<NumericInput id="input" class="below" value={0.2} />

<style>
	body {
		background-color: black;
	}

	Svg {
		height: 300px;
	}
</style>

<script>
	import { Element, G, SVG, Svg } from "@svgdotjs/svg.js";
	import {
		photonPeriodSec,
		linterp,
		invLinterp,
		dist,
		mirrorAttrs,
		photonAttrs,
		textAttrs,
		getGamma,
		photonPeriodMs,
	} from "../../scripts/common";

	const w = 600;
	const h = 100; // per group
	const margin = 8;

	const X_MIN = 0;
	const X_MAX = w / h;
	const Y_MIN = 0;
	const Y_MAX = 1; // per group

	function xScale(x: number) {
		return linterp(invLinterp(x, X_MIN, X_MAX), margin, w - margin);
	}

	function yScale(y: number) {
		return linterp(invLinterp(y, Y_MIN, Y_MAX), h - margin, margin);
	}

	const draw = SVG("#drawing", false) as Svg;
	draw.viewbox(0, 0, w, 2 * h + margin);

	const rectHeight = h / 15;
	const rectWidth = dist(0.5, xScale);

	const bottomPanelTy = h + margin;

	const topPanel = draw.group();
	const bottomPanel = draw.group().transform({ translateY: h });

	const bottomRectTop = yScale(0) - rectHeight / 2;
	const topRectBottom = yScale(1) + rectHeight / 2;
	const rectX = xScale(1.6);

	const photonRadius = h / 20;
	const photonYMin = bottomRectTop - photonRadius;
	const photonYMax = topRectBottom + photonRadius;
	const photonCx = rectX + rectWidth / 5;
	const photonCy = photonYMin;

	const trainXScale = 1;
	const train = topPanel
		.image("/images/2/Toy_train.svg")
		.transform({ scaleX: trainXScale })
		.x(xScale(0))
		.y(yScale(1))
		.width(100)
		.height(h * 0.8);

	// magic numbers computed by measuring pixels
	const trainXMin = (32 * trainXScale) / devicePixelRatio;
	const trainXMax = (240 * trainXScale) / devicePixelRatio;
	const trainTrueWidth = trainXMax - trainXMin;

	const bottomRect = bottomPanel
		.rect(rectWidth, rectHeight)
		.attr({ x: rectX, y: bottomRectTop, ...mirrorAttrs });
	const topRect = bottomPanel
		.rect(rectWidth, rectHeight)
		.attr({ x: rectX, y: topRectBottom - rectHeight, ...mirrorAttrs });

	const photon = bottomPanel
		.circle()
		.radius(photonRadius)
		.cx(photonCx)
		.cy(photonCy)
		.attr(photonAttrs);

	const text = bottomPanel
		.text("0.0")
		.x(rectX + rectWidth)
		.y(0.72 * h)
		.attr({
			...textAttrs,
			"text-anchor": "end",
			"dominant-baseline": "text-bottom",
			"font-size": 12,
		});

	let startMs: number | undefined;
	let animationFrame: number;
	let v;

	document.getElementById("input")!.addEventListener("input", () => {
		cancelAnimationFrame(animationFrame);
		startMs = undefined;
		topPanel.transform({ translateX: 0 });
		text.text("0.0");
		photon.cy(photonCy);
	});

	const speedOfLightPxPerMs = (bottomRectTop - topRectBottom) / photonPeriodMs;

	function step(timestampMs: number) {
		startMs ??= timestampMs;

		v = +(document.getElementById("input")! as HTMLInputElement).value;

		if (v === 0) {
			return;
		}

		const trainSpeedPxPerMs = speedOfLightPxPerMs * v;
		const trainArrivalTimeMs =
			(rectX - trainTrueWidth - xScale(0) + margin) / trainSpeedPxPerMs;
		const trainExitTimeMs =
			trainArrivalTimeMs + (trainTrueWidth * 0.75) / trainSpeedPxPerMs;

		console.log({
			rectX,
			trainXMax,
			x0: xScale(0),
			trainArrivalTimeMs,
			trainExitTimeMs,
		});

		const tPhoton =
			Math.max(
				Math.min(trainExitTimeMs, timestampMs - startMs) - trainArrivalTimeMs,
				0,
			) / photonPeriodMs;
		text.text(tPhoton.toFixed(1));

		const tFrac = tPhoton % 1;
		photon.cy(
			linterp(1 - Math.abs(2 * tFrac - 1), photonCy, topRectBottom + photonRadius),
		);

		topPanel.transform({ translateX: (timestampMs - startMs) * trainSpeedPxPerMs });
		if (true) {
			animationFrame = requestAnimationFrame(step);
		}
	}

	train.on("click", () => {
		animationFrame = requestAnimationFrame(step);
	});
</script>
