local w = 100;
local h = 100;

local _scale(t, tMin, tMax, s) =
  ((1 - t) * tMin + t * tMax) * s;

local xScale(x) =
  local xMin = 0.075;
  local xMax = 1 - xMin;

  _scale(x, xMin, xMax, w);

local xScaleDist(x) = xScale(x) - xScale(0);

local yScale(y) =
  local yMin = 0.925;
  local yMax = 1 - yMin;

  _scale(y, yMin, yMax, h);

local yScaleDist(y) = yScale(0) - yScale(y);

local rectHeight = yScaleDist(0.075);
local rectAttrs = {
  width: xScaleDist(1),
  height: rectHeight,
  fill: '#adf',
  stroke: '#cef',
  rx: 1,
};
local bottomRect = {
  tag: 'rect',
  attrs: rectAttrs {
    id: 'bottomMirror',
    x: xScale(0),
    y: yScale(0),
  },
};
local topRect = {
  tag: 'rect',
  attrs: rectAttrs {
    id: 'topMirror',
    x: xScale(0),
    y: yScale(1) - rectHeight,
  },
};

local photonRadius = xScaleDist(0.05);
local photonColor = '#fc0';
local photonPeriod = 1;  //seconds
local timerMax = 9;

{
  xScale: xScale,
  yScale: yScale,
  bottomRect: bottomRect,
  topRect: topRect,
  photon(y0, r): {
    tag: 'circle',
    attrs: {
      cx: 60,
      cy: y0 - r,
      r: r,
      fill: photonColor,
    },
  },
  spec: {
    attrs: {
      viewBox: '0 0 %()d %()d' % [w, h],
      id: 'lightClockSchematic',
    },
    children: [
      topRect,
      bottomRect,
    ],
  },
  photonPeriod: photonPeriod,
  photonAnim(period, r, y0, y1, repeatCount='indefinite'): {
    tag: 'animate',
    attrs: {
      local cyInit = y0 - r,
      attributeName: 'cy',
      begin: 'mainAnimation.begin',
      end: 'mainAnimation.end',
      values: std.join(
        ';',
        std.map(std.toString, [cyInit, y1 + r, cyInit])
      ),
      dur: '%()fs' % period,
      fill: 'freeze',
      repeatCount: repeatCount,
    },
  },
  clock(period, x, y, tMax, tickIdPrefix, mustFreeze): [
    {
      tag: 'text',
      attrs: {
        x: x,
        y: y,
        'text-anchor': 'end',
        'dominant-baseline': 'bottom',
        visibility: 'hidden',
        fill: 'white',
        'font-size': xScaleDist(0.1) * 5,
        'font-family': 'sans-serif',
      },
      children: [
        std.toString(i),
        {
          tag: 'set',
          attrs: {
            id: '%()s%()d' % [tickIdPrefix, i],
            attributeName: 'visibility',
            to: 'visible',
            begin: if i == 0 then 'mainAnimation.begin;tick%()d.end' % timerMax else '%()s%()d.end' % [tickIdPrefix, i - 1],
            dur: if mustFreeze(i) then 'indefinite' else '%()fs' % period,
            end: 'bottomRectTop.click',
          },
        },
      ],

    }
    for i in std.range(0, timerMax)
  ],
}
